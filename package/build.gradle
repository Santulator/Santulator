import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Open Source Software published under the Apache Licence, Version 2.0.
 */

ext {
    publishedVersion = project.version
    bundlerScript = file('bin/build-package.sh')
    santulatorLibraryPath = file("${buildDir}/libraries")
    mainJar = project(':gui').jar.outputs.files[0].name
    bundlePath = file("${buildDir}/bundle")
    fileAssociations = file("${buildDir}/resources/main/file-associations.properties")
    extraBundlerArguments = []
    if (operatingSystem.isMacOsX()) {
        packageType = 'pkg'
        appIcon = file('icons/mac/Santulator.icns')
        sessionIcon = file('icons/mac/Santulator.icns')
        extraBundlerArguments = ['--mac-sign']
    } else if (operatingSystem.isLinux()) {
        packageType = 'deb'
        appIcon = file('icons/App1024.png')
        sessionIcon = file('icons/Doc1024.png')
    } else if (operatingSystem.isWindows()) {
        appIcon = file('icons/windows/Santulator.ico')
        sessionIcon = file('icons/windows/Santulator.ico')
        bundlerScript = file('bin/build-package.bat')
        generatedInnoSetupFile = file("${buildDir}/resources/main/santulator.iss")
        windowsExecutable = file("${bundlePath}/Santulator/Santulator.exe")
        bundleContent = file("${bundlePath}/Santulator/*")
    }
    if (publishedVersion.endsWith('-SNAPSHOT')) {
        publishedVersion = '1.0.0'
    }
}

dependencies {
    compile project(':gui')
}

task copyDependencies(type: Copy) {
    from configurations.runtime
    into "${buildDir}/libraries"
}

processResources {
    filesMatching('file-associations.properties') {
        filter ReplaceTokens, tokens: [
            'santulator.session.icon': sessionIcon.toString()
        ]
    }
}

task createBundle(type: Exec, dependsOn: [copyDependencies, processResources]) {
    description 'Build the installable bundle'
    if (operatingSystem.isWindows()) {
        commandLine 'cmd', '/c',
            bundlerScript,
            javafx_jmods_path,
            santulatorLibraryPath,
            bundlePath,
            mainJar,
            publishedVersion,
            fileAssociations
    } else {
        commandLine = ['sh',
            bundlerScript,
            java_packager_path,
            packageType,
            javafx_jmods_path,
            santulatorLibraryPath,
            bundlePath,
            mainJar,
            publishedVersion,
            fileAssociations,
            *extraBundlerArguments]
    }
}

if (operatingSystem.isWindows()) {
    processResources {
        filesMatching('santulator.iss') {
            filter ReplaceTokens, tokens: [
                'bundle.version': publishedVersion,
                'executable.location': windowsExecutable.toString(),
                'bundle.content': bundleContent.toString()
            ]
        }
    }

    task reportInnoSetup(dependsOn: processResources) {
        doLast {
            println("Inno Setup file: ${generatedInnoSetupFile}")
        }
    }

    createBundle.finalizedBy reportInnoSetup
}
